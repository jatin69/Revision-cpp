/**
	 * based on Applied Cryptography by Bruce Schneier.[1]
	 * http://en.wikipedia.org/wiki/Modular_exponentiation
	 */
    unsigned Exp(unsigned base, unsigned exponent, unsigned modulus) {
		unsigned result = 1;
		while (exponent >0) {
			if (exponent%2 == 1) {
				result = (uint64_t(result)*base)%modulus;
			}
			exponent = exponent >> 1 ;
			base = (uint64_t(base)*base) % modulus;
		}
		return result;
	}

	/**
	 * Count the consecutive zero bits (trailing) on the right linearly
	 */
	int ZerosR(unsigned int v) {
		int c;  // output: c will count v's trailing zero bits,
		// so if v is 1101000 (base 2), then c will be 3
		if (v)
		{
			v = (v ^ (v - 1)) >> 1;  // Set v's trailing 0s to 1s and zero rest
			for (c = 0; v; c++) {
				v >>= 1;
			}
		}
		else
		{
			c = CHAR_BIT * sizeof(v);
		}

		return c;
	}


 bool miller_rabin_test(unsigned int n) {
		switch (n) {
			case 0:
			case 1:
				return false;
			case 2:
			case 3:
				return true;
		}

		if (n%2	== 0) return false;

		unsigned s = ZerosR(n-1);
		unsigned d = (n-1) >> s;

		// test 3-times
		for (int k=0;k<3;k++){
			unsigned a = rand()%(n-4) + 2;

			unsigned x = Exp(a, d, n);
			//printf("%u %u %u %u\n", a,d, n,x);
			if (x == 1 || x == n - 1) {
				continue;
			}

			for (unsigned i=1;i<=s-1;i++) {
				x = Exp(x, 2, n);
				if (x == 1) return false;
				if (x == n-1) continue;
			}

			return false;
		}

		return true;
	}


